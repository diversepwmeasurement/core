jobs:
  build-push-image:
    env:
      DOCKER_BUILD_CONTEXT: /home/runner/work/_temp/core-build
      JAVA_DISTRO: temurin
      JAVA_VERSION: 11
      JVM_TEST_MAVEN_OPTS: -e -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
    if: success()
    name: Build/Push Image
    outputs:
      formatted_tags: ${{ steps.format-tags.outputs.formatted_tags }}
      tags: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.set-common-vars.outputs.version }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo 'GitHub context'
    - continue-on-error: true
      name: Checkout core
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
    - continue-on-error: true
      name: Cleanup
      uses: ./.github/actions/cleanup-runner
    - continue-on-error: true
      id: restore-docker-context
      if: inputs.docker_context_cache_key != ''
      name: Restore Docker Context
      uses: actions/cache/restore@v3
      with:
        key: ${{ inputs.docker_context_cache_key }}
        path: ${{ env.DOCKER_BUILD_CONTEXT }}/context
    - continue-on-error: true
      id: build-status
      name: Build Status
      run: "rebuild=false\nif [[ -z \"${{ inputs.docker_context_cache_key }}\" ||\
        \ ! -d ${DOCKER_BUILD_CONTEXT}/context ]]; then\n  rebuild=true\nfi\n\necho\
        \ \"rebuild=${rebuild}\" >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      if: steps.build-status.outputs.rebuild == 'true'
      name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRO }}
        java-version: ${{ env.JAVA_VERSION }}
    - continue-on-error: true
      if: steps.build-status.outputs.rebuild == 'true'
      name: Build Core
      run: "mkdir -p ${DOCKER_BUILD_CONTEXT}/context\n./mvnw -ntp \\\n  ${JVM_TEST_MAVEN_OPTS}\
        \ \\\n  -Dprod=true \\\n  -Ddocker.buildArchiveOnly=${DOCKER_BUILD_CONTEXT}\
        \ \\\n  -DskipTests=true \\\n  -DskipITs=true \\\n  clean install \\\n  --file\
        \ pom.xml \\\n  --show-version\nrc=$?\nif [[ $rc != 0 ]]; then\n  echo \"\
        Build failed with exit code $rc\"\n  exit $rc\nfi\n"
    - continue-on-error: true
      id: setup-docker-context
      if: success() && steps.build-status.outputs.rebuild == 'true'
      name: Setup Context
      run: 'mkdir -p ${DOCKER_BUILD_CONTEXT}/context

        tar -xvf ${DOCKER_BUILD_CONTEXT}/docker-build.tar -C ${DOCKER_BUILD_CONTEXT}/context

        '
    - continue-on-error: true
      id: set-common-vars
      if: success()
      name: Set Common Vars
      run: "build_properties_path=${DOCKER_BUILD_CONTEXT}/context/maven/dotserver/tomcat-*/webapps/ROOT/WEB-INF/classes/build.properties\n\
        build_properties=''\nif ! ls ${build_properties_path} 1> /dev/null 2>&1; then\n\
        \  echo 'Could not find build.properties, aborting'\n  exit 1\nelse\n  build_properties=$(eval\
        \ find \"$build_properties_path\" -print)\nfi\n\necho 'Build properties:'\n\
        cat ${build_properties}\n\nversion=$(cat ${build_properties} | grep version\
        \ | cut -d'=' -f2)\nbuild_hash=$(cat ${build_properties} | grep revision |\
        \ cut -d'=' -f2)\nif [[ ! ${build_hash} =~ ^[0-9a-f]{7}$ ]]; then\n  build_hash=$(git\
        \ log -1 --pretty=%h)\n  build_hash=${build_hash::7}\nfi\n\nbuild_id=${{ inputs.ref\
        \ }}\nis_trunk=false\nif [[ \"${build_id}\" == 'master' || ${build_id} =~\
        \ ^v[0-9]{2}.[0-9]{2}.[0-9]{2}_lts$ ]]; then\n  is_trunk=true\nfi\n\nis_lts=false\n\
        if [[ ${version} =~ ^[0-9]{2}.[0-9]{2}.[0-9]{2}_lts(_v[0-9]{2})?$ ]]; then\n\
        \  is_lts=true\nfi\n\nis_snapshot=false\nis_release=false\nis_latest=false\n\
        is_custom=false\nis_trunk_snapshot=false\n\nif [[ ${version} =~ ^[0-9]{1}.[0-9]{1}.[0-9]{1}-SNAPSHOT$\
        \ ]]; then\n  version=${build_id}\n  is_snapshot=true\n  if [[ \"${is_trunk}\"\
        \ == 'true' ]]; then\n    is_trunk_snapshot=true\n  fi\nelif [[ ${version}\
        \ =~ ^[0-9]{2}.[0-9]{2}.[0-9]{2}$ ]]; then\n  is_release=true\n  is_latest=true\n\
        elif [[ ${version} =~ ^[0-9]{2}.[0-9]{2}.[0-9]{2}_lts$ ]]; then\n  is_snapshot=true\n\
        \  version=${build_id}\nelif [[ ${version} =~ ^[0-9]{2}.[0-9]{2}.[0-9]{2}_lts_v[0-9]{2}$\
        \ ]]; then\n  is_release=true\nelse\n  is_custom=true\n  version=${build_id}\n\
        fi\n\nif [[ \"${{ inputs.force_snapshot }}\" == 'true' ]]; then\n  is_snapshot=true\n\
        \  is_release=false\n  is_latest=false\nfi\n\necho \"version=${version}\"\n\
        echo \"build_hash=${build_hash}\"\necho \"build_id=${build_id}\"\necho \"\
        is_trunk=${is_trunk}\"\necho \"is_lts=${is_lts}\"\necho \"is_snapshot=${is_snapshot}\"\
        \necho \"is_trunk_snapshot=${is_trunk_snapshot}\"\necho \"is_release=${is_release}\"\
        \necho \"is_latest=${is_latest}\"\necho \"is_custom=${is_custom}\"\n\necho\
        \ \"version=${version}\" >> $GITHUB_OUTPUT\necho \"build_hash=${build_hash}\"\
        \ >> $GITHUB_OUTPUT\necho \"build_id=${build_id}\" >> $GITHUB_OUTPUT\necho\
        \ \"is_trunk=${is_trunk}\" >> $GITHUB_OUTPUT\necho \"is_lts=${is_lts}\" >>\
        \ $GITHUB_OUTPUT\necho \"is_snapshot=${is_snapshot}\" >> $GITHUB_OUTPUT\n\
        echo \"is_trunk_snapshot=${is_trunk_snapshot}\" >> $GITHUB_OUTPUT\necho \"\
        is_release=${is_release}\" >> $GITHUB_OUTPUT\necho \"is_latest=${is_latest}\"\
        \ >> $GITHUB_OUTPUT\necho \"is_custom=${is_custom}\" >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      if: inputs.docker_registry == 'DOCKER.IO' || inputs.docker_registry == 'BOTH'
      name: Docker.io login
      uses: docker/login-action@v3.0.0
      with:
        password: ${{ secrets.docker_io_token }}
        username: ${{ secrets.docker_io_username }}
    - continue-on-error: true
      if: inputs.docker_registry == 'GHCR.IO' || inputs.docker_registry == 'BOTH'
      name: GHCR.io login
      uses: docker/login-action@v3.0.0
      with:
        password: ${{ secrets.ghcr_io_token }}
        registry: ghcr.io
        username: ${{ secrets.ghcr_io_username }}
    - continue-on-error: true
      id: meta
      if: success()
      name: Docker Metadata
      uses: docker/metadata-action@v5
      with:
        images: 'dotcms/dotcms

          '
        tags: 'type=raw,value=${{ steps.set-common-vars.outputs.version }}_{{sha}},enable=true

          type=raw,value=${{ steps.set-common-vars.outputs.version }}_SNAPSHOT,enable=${{
          steps.set-common-vars.outputs.is_snapshot }}

          type=raw,value=${{ steps.set-common-vars.outputs.version }}_latest_SNAPSHOT,enable=${{
          steps.set-common-vars.outputs.is_trunk_snapshot }}

          type=raw,value=${{ steps.set-common-vars.outputs.version }},enable=${{ steps.set-common-vars.outputs.is_release
          }}

          type=raw,value=latest,enable=${{ steps.set-common-vars.outputs.is_latest
          }}

          type=raw,value={{sha}},enable=${{ steps.set-common-vars.outputs.is_custom
          }}

          '
    - continue-on-error: true
      if: success()
      name: Debug Docker Metadata
      run: 'echo "${{ fromJSON(steps.meta.outputs.json) }}"

        '
    - continue-on-error: true
      if: success()
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3.0.0
      with:
        image: tonistiigi/binfmt:latest
        platforms: ${{ inputs.docker_platforms }}
    - continue-on-error: true
      id: docker-setup-buildx
      if: success()
      name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3.0.0
      with:
        driver-opts: 'image=moby/buildkit:v0.12.2

          '
        platforms: ${{ inputs.docker_platforms }}
        version: latest
    - continue-on-error: true
      if: success()
      name: Build/Push Docker Image
      uses: docker/build-push-action@v5
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: ${{ env.DOCKER_BUILD_CONTEXT }}/context
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ inputs.docker_platforms }}
        pull: true
        push: false
        tags: ${{ steps.meta.outputs.tags }}
    - continue-on-error: true
      id: format-tags
      name: Format Tags
      run: 'tags=''''

        tags_arr=( ${{ steps.meta.outputs.tags }} )


        for tag in "${tags_arr[@]}"

        do

        [[ -n "${tags}" ]] && tags="${tags}, "

        tags="${tags}\`${tag}\`"

        done


        echo "formatted_tags=${tags}" >> $GITHUB_OUTPUT

        '
name: Maven Build Docker Image
on:
  repository_dispatch:
    types: trigger-ga___maven-build-docker-image.yml
