defaults:
  run:
    shell: bash
env:
  BRANCH: ${{ inputs.branch || github.ref_name }}
  GRAALVM_VERSION: 22.1.0
  JAVA_DISTRO: temurin
  JAVA_VERSION: 11
  SKIP_TESTS: true
jobs:
  build:
    name: Build native image on ${{ matrix.label }}
    needs: os-runners
    outputs:
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}
      artifact-url: ${{ steps.upload-artifact.outputs.artifact-url }}
      date: ${{ steps.get-date.outputs.date }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}
    - continue-on-error: true
      if: ${{ matrix.os == 'ubuntu-latest' }}
      name: Cleanup Ubuntu Runner
      uses: ./.github/actions/cleanup-runner
    - continue-on-error: true
      if: ${{ contains(matrix.os, 'macos-') }}
      name: Cleanup MacOS Runner
      uses: ./.github/actions/cleanup-macos-runner
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JAVA_DISTRO }}
        java-version: ${{ env.JAVA_VERSION }}
    - continue-on-error: true
      if: ${{ inputs.buildNativeImage == true && matrix.os != 'windows-latest' }}
      name: Set up GRAALVM for ${{ matrix.label }}
      run: "if [ \"${{ matrix.os }}\" == \"ubuntu-latest\" ]; then\n  echo \"GRAALVM\
        \ on Linux (AMD64)\"\n\n  ARCH=amd64\n  PLATFORM=linux\n  INSTALLATION_PATH=/usr/lib/jvm\n\
        \nelse\n  if [ \"${{ matrix.os }}\" == \"macos-13-xlarge\" ]; then\n    echo\
        \ \"GRAALVM on Mac (AARCH64)\"\n    ARCH=aarch64\n  else\n    echo \"GRAALVM\
        \ on Mac (AMD64)\"\n    ARCH=amd64\n  fi\n\n  PLATFORM=darwin\n  INSTALLATION_PATH=/Library/Java/JavaVirtualMachines\n\
        fi\n\necho \"PLATFORM=$PLATFORM\"\necho \"ARCH=$ARCH\"\necho \"INSTALLATION_PATH=$INSTALLATION_PATH\"\
        \n\nwget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{\
        \ env.GRAALVM_VERSION }}/graalvm-ce-java11-${PLATFORM}-${ARCH}-${{ env.GRAALVM_VERSION\
        \ }}.tar.gz\nsudo mkdir -p $INSTALLATION_PATH\ntar -xzf graalvm-ce-java11-${PLATFORM}-${ARCH}-${{\
        \ env.GRAALVM_VERSION }}.tar.gz\nsudo mv graalvm-ce-java11-${{ env.GRAALVM_VERSION\
        \ }} $INSTALLATION_PATH\n\nif [ \"${{ matrix.os }}\" != \"ubuntu-latest\"\
        \ ]; then\n  sudo xattr -r -d com.apple.quarantine /Library/Java/JavaVirtualMachines/graalvm-ce-java11-${{\
        \ env.GRAALVM_VERSION }}/Contents/Home\n  GRAALVM_HOME=\"${INSTALLATION_PATH}/graalvm-ce-java11-${{\
        \ env.GRAALVM_VERSION }}/Contents/Home\"\nelse\n  GRAALVM_HOME=\"${INSTALLATION_PATH}/graalvm-ce-java11-${{\
        \ env.GRAALVM_VERSION }}\"\nfi\n\necho \"GRAALVM_HOME=$GRAALVM_HOME\" >> $GITHUB_ENV\n\
        echo \"JAVA_HOME=$GRAALVM_HOME\" >> $GITHUB_ENV\nPATH=\"$GRAALVM_HOME/bin:$PATH\"\
        \necho \"PATH=$PATH\" >> $GITHUB_ENV\ngu install native-image\n"
    - continue-on-error: true
      if: ${{ inputs.buildNativeImage == true && matrix.os == 'windows-latest' }}
      name: Set up GRAALVM for (Windows)
      run: "$ARCH=\"amd64\"\n$DOWNLOAD_URL=\"https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{\
        \ env.GRAALVM_VERSION }}/graalvm-ce-java11-windows-${ARCH}-${{ env.GRAALVM_VERSION\
        \ }}.zip\"\n$OUTPUT_PATH=\"C:\\graalvm-ce-java11-windows-${ARCH}-${{ env.GRAALVM_VERSION\
        \ }}.zip\"\n$GRAALVM_INSTALLATION_PATH=\"C:\\Program Files (x86)\\Java\"\n\
        \nInvoke-WebRequest -Uri $DOWNLOAD_URL -OutFile $OUTPUT_PATH\n\nif (Test-Path\
        \ -Path $GRAALVM_INSTALLATION_PATH -PathType Container) {\n  Write-Host \"\
        GRAALVM installation path exists.\"\n} else {\n  Write-Host \"Creating GRAALVM\
        \ installation path.\"\n  New-Item -ItemType Directory -Path $GRAALVM_INSTALLATION_PATH\n\
        }\n\nExpand-Archive -Path $OUTPUT_PATH -DestinationPath $GRAALVM_INSTALLATION_PATH\n\
        \n$env:JAVA_HOME=\"${GRAALVM_INSTALLATION_PATH}\\graalvm-ce-java11-22.1.0\"\
        \n$env:Path=\"${env:Path};${env:JAVA_HOME}\\bin;C:\\Program Files\\Microsoft\
        \ Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build;C:\\Program Files\\\
        Microsoft Visual Studio\\2022\\Enterprise\\VC\\Tools\\MSVC\\14.38.33130\\\
        bin\\HostX86\\x64\"\n\necho \"JAVA_HOME=${env:JAVA_HOME}\" >> \"$env:GITHUB_ENV\"\
        \necho \"Path=${env:Path}\" >> \"$env:GITHUB_ENV\"\n\ngu.cmd install native-image\n"
      shell: pwsh
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      id: cache-maven
      name: Cache Maven Repository
      uses: actions/cache@v4
      with:
        key: mavencore-${{ steps.get-date.outputs.date }}-${{ github.run_id }}
        path: ~/.m2/repository
        restore-keys: 'mavencore-${{ steps.get-date.outputs.date }}

          '
    - continue-on-error: true
      name: Compile source code
      run: './mvnw clean install -Dtest.failure.ignore=true -DskipTests=$SKIP_TESTS
        -am -pl :dotcms-cli

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      if: ${{ matrix.label == 'Linux' }}
      name: Build uber-jar
      run: './mvnw package -Dquarkus.package.type="uber-jar" -DskipTests=$SKIP_TESTS
        -pl :dotcms-cli

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      if: ${{ inputs.buildNativeImage == true && matrix.os != 'windows-latest' }}
      name: Build Native Image ${{ matrix.label }}
      run: './mvnw package -Pnative -DskipTests=$SKIP_TESTS -pl :dotcms-cli

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      if: ${{ inputs.buildNativeImage == true && matrix.os == 'windows-latest' }}
      name: Build Native Image (Windows)
      run: 'cmd /c ''call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        && .\mvnw.cmd package -Dnative -DskipTests=true -pl :dotcms-cli''

        '
      shell: pwsh
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      if: ${{ inputs.buildNativeImage == true }}
      name: Create distribution
      run: './mvnw -B -ntp -Pdist package -DskipTests=$SKIP_TESTS -pl :dotcms-cli

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      if: ${{ inputs.buildNativeImage == true }}
      name: Distribution tree
      run: 'ls -ltr cli/target/distributions

        '
      working-directory: ${{ github.workspace }}/tools/dotcms-cli/
    - continue-on-error: true
      id: upload-artifact
      name: Upload built distribution
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: ignore
        name: cli-artifacts-${{ matrix.os }}
        path: '${{ github.workspace }}/tools/dotcms-cli/cli/target/*.jar

          ${{ github.workspace }}/tools/dotcms-cli/cli/target/distributions/*.zip

          '
        retention-days: 2
    - continue-on-error: true
      if: failure()
      name: Prepare reports archive (if maven failed)
      run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Upload reports Archive (if maven failed)
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-cli-native-${{ matrix.label }}
        path: test-reports.tgz
    - continue-on-error: true
      if: always()
      name: cli-build
      uses: actions/upload-artifact@v4
      with:
        name: build-reports-test-cli - native ${{ matrix.label }}
        path: 'tools/dotcms-cli/**/target/failsafe-reports/*.xml

          tools/dotcms-cli/**/target/jacoco-report/*.exec

          target/build-report.json

          LICENSE

          '
        retention-days: 2
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJSON( needs.os-runners.outputs.runners ) }}
  os-runners:
    name: Get OS matrix
    outputs:
      runners: ${{ steps.set-os.outputs.runners }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: set-os
      name: Set OS
      run: "if [[ \"${{ inputs.buildNativeImage }}\" == \"true\" ]]; then\n  RUNNERS='[{\
        \ \"os\": \"ubuntu-latest\", \"label\": \"Linux\" }, { \"os\": \"macos-latest\"\
        , \"label\": \"macOS-Intel\" }, { \"os\": \"macos-13-xlarge\", \"label\":\
        \ \"macOS-Silicon\" }]'\nelse\n  RUNNERS='[{ \"os\": \"ubuntu-latest\", \"\
        label\": \"Linux\" }]'\nfi\necho \"runners=$RUNNERS\" >> $GITHUB_OUTPUT\n"
name: CLI Build
on:
  repository_dispatch:
    types: trigger-ga___cli-build-artifacts.yml
