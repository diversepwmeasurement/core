concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref
    || github.run_id }}
env:
  DOCKER_IMAGE: dotcms/dotcms_test
  DOCKER_PLATFORMS: linux/amd64,linux/arm64
  DOCKER_TAG: run-${{ github.run_id }}
  JVM_TEST_MAVEN_OPTS: -e -B --no-transfer-progress -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
  REGISTRY: ghcr.io
jobs:
  build-cli:
    name: CLI Build
    needs:
    - build-jdk11
    - linux-jvm-tests
    - linux-integration-tests
    - linux-postman-tests
    uses: ./.github/workflows/cli-build-artifacts.yml
    with:
      branch: ${{ github.ref }}
      buildNativeImage: true
  build-jdk11:
    env:
      DOCKER_BUILD_CONTEXT: /home/runner/work/_temp/core-build
    if: ${{ needs.changes.outputs.build == 'true' }}
    name: Initial JDK 11 Build
    needs: changes
    permissions:
      contents: read
      packages: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - continue-on-error: true
      if: github.ref != 'refs/heads/master'
      name: Setup master branch locally without switching current branch
      run: git fetch origin master:master
    - continue-on-error: true
      uses: ./.github/actions/cleanup-runner
    - continue-on-error: true
      name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '11'
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      id: cache-maven
      name: Cache Maven Repository
      uses: actions/cache@v4
      with:
        key: mavencore-${{ steps.get-date.outputs.date }}-${{ github.run_id }}
        path: ~/.m2/repository
        restore-keys: 'mavencore-${{ steps.get-date.outputs.date }}

          '
    - continue-on-error: true
      id: cache-node-binary
      name: Cache Node Binary
      uses: actions/cache@v4
      with:
        key: node-binary-${{ hashFiles('core-web/.nvmrc') }}
        path: 'installs

          '
    - continue-on-error: true
      id: cache-yarn
      name: Cache yarn
      uses: actions/cache@v4
      with:
        key: yarn-${{ hashFiles('**/yarn.lock') }}
        path: '~/.cache/yarn

          '
        restore-keys: yarn-
    - continue-on-error: true
      name: Lint Checks
      run: './mvnw $JVM_TEST_MAVEN_OPTS -Pvalidate --fail-at-end -Dgithub.event.name=${{
        github.event_name }} --file pom.xml

        '
      shell: bash
    - continue-on-error: true
      name: Maven Build No Test
      run: 'echo "Creating $DOCKER_BUILD_CONTEXT"

        mkdir -p $DOCKER_BUILD_CONTEXT

        ./mvnw -Dprod=true $JVM_TEST_MAVEN_OPTS -Dcoreit.test.skip=true -Dpostman.test.skip=true
        -Ddocker.buildArchiveOnly=$DOCKER_BUILD_CONTEXT -Ddotcms.image.name=${DOCKER_IMAGE}:${DOCKER_TAG}
        --show-version -DskipTests=true -DskipITs=true clean install --file pom.xml

        '
      shell: bash
    - continue-on-error: true
      name: Persist Maven Repo
      uses: actions/upload-artifact@v4
      with:
        name: maven-repo
        path: ~/.m2/repository
    - continue-on-error: true
      name: Delete Local Artifacts From Cache
      run: find ~/.m2 -name \*-SNAPSHOT -type d -exec rm -rf {} +
      shell: bash
    - continue-on-error: true
      name: Persist Docker Build Context
      uses: actions/upload-artifact@v4
      with:
        name: docker-build-context
        path: ${{ env.DOCKER_BUILD_CONTEXT }}/docker-build.tar
    - continue-on-error: true
      name: Save Docker image to a tar file
      run: docker save ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} > image.tar
    - continue-on-error: true
      name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar
  changes:
    name: Check Changed Files
    outputs:
      backend: ${{ steps.filter-rewrite.outputs.backend }}
      build: ${{ steps.filter-rewrite.outputs.build }}
      cli: ${{ steps.filter-rewrite.outputs.cli }}
      frontend: ${{ steps.filter-rewrite.outputs.frontend }}
      jvm_unit_test: ${{ steps.filter-rewrite.outputs.jvm_unit_test }}
    permissions:
      pull-requests: read
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      id: filter
      uses: dorny/paths-filter@v3.0.1
      with:
        filters: .github/filters.yaml
        list-files: escape
    - continue-on-error: true
      env:
        CICD_SKIP_TESTS: ${{ vars.CICD_SKIP_TESTS }}
      id: filter-rewrite
      name: Rewrite Filter
      run: "# Default action outcomes based on paths-filter action outputs\nfrontend=${{\
        \ steps.filter.outputs.frontend }}\ncli=${{ steps.filter.outputs.cli }}\n\
        backend=${{ steps.filter.outputs.backend }}\nbuild=${{ steps.filter.outputs.build\
        \ }}\njvm_unit_test=${{ steps.filter.outputs.jvm_unit_test }}\n\n# Check if\
        \ the commit is to the master branch\nis_master=$(echo ${{ github.ref }} |\
        \ sed -n 's/refs\\/heads\\/master/&/p')\nskip_tests=${CICD_SKIP_TESTS:-false}\
        \  # Use environment variable, default to 'false'\n\n# Adjust outputs based\
        \ on conditions\nif [ \"$is_master\" == \"refs/heads/master\" ]; then\n  echo\
        \ \"Running build and all tests on the master branch.\"\n  build=true\n  frontend=true\n\
        \  cli=true\n  backend=true\n  jvm_unit_test=true\nfi\n# The below line ensures\
        \ that if skip_tests is true, all tests are set to false.\nif [ \"$skip_tests\"\
        \ == \"true\" ]; then\n  echo \"Skipping tests as per CICD_SKIP_TESTS flag.\"\
        \n  frontend=false\n  cli=false\n  backend=false\n  jvm_unit_test=false\n\
        fi\n\n# Export the outcomes as GitHub Actions outputs\necho \"frontend=${frontend}\"\
        \ >> $GITHUB_OUTPUT\necho \"cli=${cli}\" >> $GITHUB_OUTPUT\necho \"backend=${backend}\"\
        \ >> $GITHUB_OUTPUT\necho \"build=${build}\" >> $GITHUB_OUTPUT\necho \"jvm_unit_test=${jvm_unit_test}\"\
        \ >> $GITHUB_OUTPUT\n"
  final-status:
    if: always()
    name: Final Status
    needs: prepare-report-data
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Check Final Status
      run: "if [ \"${{ needs.prepare-report-data.outputs.aggregate_status }}\" !=\
        \ \"SUCCESS\" ]; then\n  echo \"One or more jobs failed!\"\n  exit 1\nfi"
  linux-cli-tests:
    env:
      MAVEN_OPTS: -Xmx2048m
    if: ${{ needs.changes.outputs.cli == 'true' || needs.changes.outputs.backend ==
      'true' }}
    name: CLI Tests - JDK ${{matrix.java.name}}
    needs:
    - changes
    - build-jdk11
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK ${{ matrix.java.name }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ matrix.java.distribution }}
        java-version: ${{ matrix.java.java-version }}
    - continue-on-error: true
      name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp/docker-image
    - continue-on-error: true
      name: Load Docker image from tar file
      run: docker load < /tmp/docker-image/image.tar
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      name: Download Maven Repo
      uses: actions/download-artifact@v4
      with:
        name: maven-repo
        path: ~/.m2/repository
    - continue-on-error: true
      env:
        DOTCMS_LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
      id: prepare-license
      name: Prepare license
      run: 'DOTCMS_LICENSE_PATH=~/.dotcms/license

        mkdir -p ${DOTCMS_LICENSE_PATH}

        echo "${DOTCMS_LICENSE_KEY}" > ${DOTCMS_LICENSE_PATH}/license.dat

        echo "DOTCMS_LICENSE_FILE=${DOTCMS_LICENSE_PATH}/license.dat" >> "$GITHUB_ENV"

        '
    - continue-on-error: true
      name: Build
      run: eval ./mvnw -Dprod $JVM_TEST_MAVEN_OPTS -Dtestcontainers.docker.image=${DOCKER_IMAGE}:${DOCKER_TAG}
        -pl :dotcms-api-data-model,:dotcms-cli verify ${{ matrix.java.maven_args}}
    - continue-on-error: true
      if: failure()
      name: Prepare reports archive (if maven failed)
      run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Upload reports Archive (if maven failed)
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-cli-jvm${{matrix.java.name}}
        path: test-reports.tgz
    - continue-on-error: true
      if: always()
      name: cli-tests
      uses: actions/upload-artifact@v3
      with:
        name: build-reports-test-cli - JDK ${{matrix.java.name}}
        path: 'tools/dotcms-cli/**/target/failsafe-reports/*.xml

          tools/dotcms-cli/**/target/jacoco-report/*.exec

          target/build-report.json

          LICENSE

          '
        retention-days: 2
    strategy:
      fail-fast: true
      matrix:
        java:
        - distribution: temurin
          java-version: 11
          maven_args: ''
          name: '11'
    timeout-minutes: 240
  linux-frontend-tests:
    env:
      MAVEN_OPTS: -Xmx2048m
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    name: Frontend Unit Tests
    needs:
    - changes
    - build-jdk11
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      name: Download Maven Repo
      uses: actions/download-artifact@v4
      with:
        name: maven-repo
        path: ~/.m2/repository
    - continue-on-error: true
      id: cache-node-binary
      name: Restore Node Binary
      uses: actions/cache/restore@v4
      with:
        key: node-binary-${{ hashFiles('core-web/.nvmrc') }}
        path: 'installs

          '
    - continue-on-error: true
      id: cache-yarn
      name: Cache yarn
      uses: actions/cache@v4
      with:
        key: yarn-${{ hashFiles('**/yarn.lock') }}
        path: '~/.cache/yarn

          '
        restore-keys: yarn-
    - continue-on-error: true
      name: Build
      run: eval ./mvnw -Dprod $JVM_TEST_MAVEN_OPTS -pl :dotcms-core-web test
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Prepare failure archive (if maven failed)
      run: find . -name 'surefire-reports' -type d | tar -czf test-reports.tgz -T
        -
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Upload failure Archive (if maven failed)
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-frontend
        path: test-reports.tgz
    - continue-on-error: true
      if: always()
      name: frontend-unit-tests
      uses: actions/upload-artifact@v3
      with:
        name: build-reports-test-Frontend unit tests
        path: 'core-web/target/*-reports/**/TEST-*.xml

          target/build-report.json

          LICENSE

          '
        retention-days: 2
    timeout-minutes: 240
  linux-integration-tests:
    env:
      MAVEN_OPTS: -Xmx2048m
    if: ${{ needs.changes.outputs.backend == 'true' }}
    name: JVM IT Tests - JDK ${{matrix.java.name}} ${{matrix.suites.name}}
    needs:
    - build-jdk11
    - changes
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up IT Tests ${{ matrix.java.name }} ${{ matrix.suites.name }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ matrix.java.distribution }}
        java-version: ${{ matrix.java.java-version }}
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      name: Download Maven Repo
      uses: actions/download-artifact@v4
      with:
        name: maven-repo
        path: ~/.m2/repository
    - continue-on-error: true
      env:
        DOT_DOTCMS_LICENSE: ${{ secrets.DOTCMS_LICENSE }}
      name: Build
      run: eval ./mvnw -Pcoverage -Dprod $JVM_TEST_MAVEN_OPTS verify -pl :dotcms-integration
        -Dcoreit.test.skip=false ${{ matrix.suites.maven_args}} ${{ matrix.java.maven_args}}
    - continue-on-error: true
      if: failure()
      name: Prepare reports archive (if maven failed)
      run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Upload failure Archive (if maven failed)
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-linux-jvm${{matrix.java.name}}-${{matrix.suites.pathName}}
        path: test-reports.tgz
    - continue-on-error: true
      if: always()
      name: failsafe-it-tests
      uses: actions/upload-artifact@v3
      with:
        name: build-reports-test-IT Tests - JDK ${{matrix.java.name}} - ${{matrix.suites.name}}
        path: 'dotcms-integration/target/failsafe-reports/*.xml

          dotcms-integration/target/jacoco-report/*.exec

          target/build-report.json

          LICENSE

          '
        retention-days: 2
    strategy:
      fail-fast: false
      matrix:
        java:
        - distribution: temurin
          java-version: 11
          maven_args: ''
          name: '11'
        suites:
        - maven_args: -Dit.test=MainSuite1a -Dit.test.forkcount=1
          name: MainSuite 1a
          pathName: mainsuite1a
        - maven_args: -Dit.test=MainSuite1b -Dit.test.forkcount=1
          name: MainSuite 1b
          pathName: mainsuite1b
        - maven_args: -Dit.test=MainSuite2a -Dit.test.forkcount=1
          name: MainSuite 2a
          pathName: mainsuite2a
        - maven_args: -Dit.test=MainSuite2b -Dit.test.forkcount=1
          name: MainSuite 2b
          pathName: mainsuite2b
    timeout-minutes: 240
  linux-jvm-tests:
    env:
      MAVEN_OPTS: -Xmx2048m
    if: ${{ needs.changes.outputs.jvm_unit_test == 'true' }}
    name: JVM Unit Tests - JDK ${{matrix.java.name}}
    needs:
    - changes
    - build-jdk11
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK ${{ matrix.java.name }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ matrix.java.distribution }}
        java-version: ${{ matrix.java.java-version }}
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      name: Download Maven Repo
      uses: actions/download-artifact@v4
      with:
        name: maven-repo
        path: ~/.m2/repository
    - continue-on-error: true
      name: Build
      run: eval ./mvnw -Pcoverage -Dprod $JVM_TEST_MAVEN_OPTS test -pl \!:dotcms-core-web
        ${{ matrix.java.maven_args}}
    - continue-on-error: true
      if: failure()
      name: Prepare reports archive (if maven failed)
      run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Upload reports Archive (if maven failed)
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-linux-jvm${{matrix.java.name}}
        path: test-reports.tgz
    - continue-on-error: true
      if: always()
      name: core-maven-unit-tests
      uses: actions/upload-artifact@v3
      with:
        name: build-reports-test-JVM Tests - JDK ${{matrix.java.name}}
        path: 'dotCMS/target/*-reports/TEST-*.xml

          dotCMS/target/jacoco-report/*.exec

          target/build-report.json

          LICENSE

          '
        retention-days: 2
    strategy:
      fail-fast: false
      matrix:
        java:
        - distribution: temurin
          java-version: 11
          maven_args: ''
          name: '11'
    timeout-minutes: 240
  linux-postman-tests:
    if: ${{ needs.changes.outputs.backend == 'true' }}
    name: Run Postman Tests - ${{matrix.collection_group}}
    needs:
    - build-jdk11
    - changes
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      id: fetch-core
      name: Fetch Core Repo
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Download Maven Repo
      uses: actions/download-artifact@v4
      with:
        name: maven-repo
        path: ~/.m2/repository
    - continue-on-error: true
      name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp/docker-image
    - continue-on-error: true
      name: Load Docker image from tar file
      run: docker load < /tmp/docker-image/image.tar
    - continue-on-error: true
      id: cache-node-binary
      name: Cache Node Binary
      uses: actions/cache@v4
      with:
        key: node-binary-${{ hashFiles('core-web/.nvmrc') }}
        path: 'installs

          '
    - continue-on-error: true
      id: cache-yarn
      name: Cache yarn
      uses: actions/cache@v4
      with:
        key: yarn-${{ hashFiles('**/yarn.lock') }}
        path: '~/.cache/yarn

          '
        restore-keys: yarn-
    - continue-on-error: true
      name: Prepare license
      run: 'mkdir -p ~/.dotcms/license/

        touch ~/.dotcms/license/license.dat

        echo "${{ secrets.DOTCMS_LICENSE }}" > ~/.dotcms/license/license.dat

        '
    - continue-on-error: true
      id: run-postman-tests
      name: Run Postman Tests
      run: "./mvnw -Pcoverage $JVM_TEST_MAVEN_OPTS verify \\\n  -pl :dotcms-postman\
        \ -Dpostman.test.skip=false \\\n  -Dpostman.collections=${{ matrix.collection_group\
        \ }} \\\n  -Ddotcms.image.name=${DOCKER_IMAGE}:${DOCKER_TAG}\npec=$?\n[[ pec\
        \ -eq 0 ]] || exit pec\n"
      timeout-minutes: 90
    - continue-on-error: true
      if: failure()
      name: Prepare reports archive (if maven failed)
      run: 'find . -name ''*-reports'' -type d

        tree ./dotcms-postman

        find . -name ''*-reports'' -type d | tar -czf test-reports.tgz -T -

        '
      shell: bash
    - continue-on-error: true
      if: failure()
      name: Upload failure Archive (if maven failed)
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-postman-${{ matrix.collection_group }}
        path: test-reports.tgz
    - continue-on-error: true
      if: always()
      name: failsafe-postman-tests
      uses: actions/upload-artifact@v3
      with:
        name: build-reports-test-postman - ${{ matrix.collection_group }}
        path: 'dotcms-postman/target/failsafe-reports/*.xml

          dotcms-postman/target/jacoco-report/*.exec

          target/build-report.json

          LICENSE

          '
        retention-days: 2
    strategy:
      fail-fast: false
      matrix:
        collection_group:
        - category-content
        - container
        - experiment
        - graphql
        - page
        - pp
        - template
        - workflow
        - default
  prepare-report-data:
    if: always()
    name: Prepare Report Data
    needs:
    - build-jdk11
    - linux-jvm-tests
    - linux-integration-tests
    - linux-frontend-tests
    - linux-cli-tests
    - linux-postman-tests
    - sonarqube
    - build-cli
    outputs:
      aggregate_status: ${{ steps.prepare-workflow-data.outputs.aggregate_status }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: download-artifact
      name: Download build reports
      uses: dawidd6/action-download-artifact@v3.0.0
      with:
        if_no_artifact_found: warn
        name: build-reports-*
        name_is_regexp: true
        path: /tmp/build-step-reports
    - continue-on-error: true
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
      id: prepare-workflow-data
      name: Prepare workflow data
      run: "AGGREGATE_STATUS=\"SUCCESS\"\njobs_status=\"${{ toJson(needs) }}\"\necho\
        \ \"job status=${jobs_status}\"\nwhile IFS=\" \" read -r key result; do\n\
        \  key=$(echo $key | tr -d ' {')\n  result=$(echo $result | tr -d ',')\n\n\
        \  echo \"Job: $key, Result: $result\"\n\n  if [[ $result == \"cancelled\"\
        \ ]]; then\n    AGGREGATE_STATUS=\"CANCELLED\"\n    break\n  elif [[ $result\
        \ == \"failure\" ]]; then\n    AGGREGATE_STATUS=\"FAILURE\"\n  fi\ndone <\
        \ <(echo \"$jobs_status\" | awk -F': ' '/result:/ {print $1,$2}')\n\nFIRST_FAIL_STEP=\"\
        \"\nFIRST_FAIL_MODULE=\"\"\n\necho '{' > workflow-data.json\n\nEVENT_TYPE=\"\
        ${{ github.event_name }}\"\n\nif [[ \"$EVENT_TYPE\" == \"pull_request\" ]];\
        \ then\n  echo \"Creating workflow data for pull request ${PR_TITLE}\"\n \
        \ BRANCH=\"${{ github.head_ref }}\"\nelse\n    PR_TITLE=\"N/A\"\n    BRANCH=\"\
        ${{ github.ref }}\"\n\n    echo \"Creating workflow data for branch ${BRANCH}\"\
        \nfi\n\nBRANCH=\"${BRANCH##*/}\"\n\nPR_TITLE_JQ=$(jq --arg title \"$PR_TITLE\"\
        \ -n '$title')\n\necho '\"branch\": \"'$BRANCH'\",' >> workflow-data.json\n\
        echo '\"run_id\": \"'${{ github.run_id }}'\",' >> workflow-data.json\necho\
        \ '\"trigger_event_name\": \"'$GITHUB_EVENT_NAME'\",' >> workflow-data.json\n\
        echo '\"source_repository\": \"'$GITHUB_REPOSITORY'\",' >> workflow-data.json\n\
        \necho '\"merge_sha\": \"'${{ github.sha }}'\",' >> workflow-data.json\n\n\
        echo '\"base_sha\": \"'${{ github.event.pull_request.base.sha }}'\",' >> workflow-data.json\n\
        echo '\"base_branch\": \"'${{ github.event.pull_request.base.sha }}'\",' >>\
        \ workflow-data.json\necho '\"base_author\": \"'${{ github.event.pull_request.base.user.login\
        \ }}'\",' >> workflow-data.json\n\necho '\"head_author\": \"'${{ github.event.pull_request.head.user.login\
        \ }}'\",' >> workflow-data.json\necho '\"head_name\": \"'${{ github.event.pull_request.head.ref\
        \ }}'\",' >> workflow-data.json\necho '\"head_sha\": \"'${{ github.event.pull_request.head.sha\
        \ }}'\",' >> workflow-data.json\n\necho '\"pr_id\": \"'${{ github.event.pull_request.id\
        \ }}'\",' >> workflow-data.json\necho '\"pr_number\": \"'${{ github.event.pull_request.number\
        \ }}'\",' >> workflow-data.json\necho \"\\\"pr_title\\\": $PR_TITLE_JQ,\"\
        \ >> workflow-data.json\necho '\"pr_author\": \"'${{ github.event.pull_request.user.login\
        \ }}'\",' >> workflow-data.json\necho '\"pr_merge_state\": \"'${{ github.event.pull_request.mergeable_state\
        \ }}'\",' >> workflow-data.json\n\n\necho '\"build_reports\": [' >> workflow-data.json\n\
        total_reports=$(find /tmp/build-step-reports/build-reports-*/target -name\
        \ build-report.json 2>/dev/null | wc -l)\n\nreport_index=0\nif [ \"$total_reports\"\
        \ -eq \"0\" ]; then\n  echo \"No build report files found.\"\nelse\n  for\
        \ build_report in \"/tmp/build-step-reports/build-reports-\"*/target/build-report.json;\
        \ do\n    ((report_index=report_index+1))\n    step_name=$(basename \"$(dirname\
        \ \"$(dirname \"$build_report\")\")\" | sed 's/build-reports-//')\n    cat\
        \ \"$build_report\" | jq \".step_name = \\\"$step_name\\\"\" >> workflow-data.json\n\
        \    # If the aggregate status is still SUCCESS, check if this module failed\n\
        \    if [[ \"$AGGREGATE_STATUS\" == \"SUCCESS\" ]]; then\n      # Loop over\
        \ each projectReport\n      length=$(jq '.projectReports | length' \"$build_report\"\
        )\n      for (( i=0; i<$length; i++ )); do\n      status=$(jq -r \".projectReports[$i].status\"\
        \ \"$build_report\")\n      if [[ \"$status\" == \"FAILURE\" ]]; then\n  \
        \      AGGREGATE_STATUS=\"FAILURE\"\n        FIRST_FAIL_STEP=\"$step_name\"\
        \n        FIRST_FAIL_MODULE=\"$(jq -r \".projectReports[$i].name\" \"$build_report\"\
        )\"\n        FIRST_FAIL_ERROR=\"$(jq -r \".projectReports[$i].error\" \"$build_report\"\
        )\"\n      fi\n      done\n    fi\n\n    # If not the last file, append a\
        \ comma\n    if (( report_index != total_reports )); then\n      echo ','\
        \ >> workflow-data.json\n    fi\n  done\nfi\n\necho '],' >> workflow-data.json\n\
        echo '\"aggregate_status\": \"'$AGGREGATE_STATUS'\"' >> workflow-data.json\n\
        if [[ \"$AGGREGATE_STATUS\" != \"SUCCESS\" ]]; then\n  echo ',' >> workflow-data.json\n\
        \  echo '\"first_fail_step\": \"'$FIRST_FAIL_STEP'\",' >> workflow-data.json\n\
        \  echo '\"first_fail_module\": \"'$FIRST_FAIL_MODULE'\",' >> workflow-data.json\n\
        \  echo '\"first_fail_error\": \"'$FIRST_FAIL_ERROR'\"' >> workflow-data.json\n\
        fi\necho '}' >> workflow-data.json\n\necho \"aggregate_status=${AGGREGATE_STATUS}\"\
        \ >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      name: Upload workflow data
      uses: actions/upload-artifact@v3
      with:
        name: workflow-data
        path: ./workflow-data.json
  sonarqube:
    if: '(always() && !cancelled()) &&

      (needs.changes.outputs.build == ''true'') &&

      (github.repository == ''dotCMS/core'') &&

      (github.ref == ''refs/heads/master'' || github.event_name == ''pull_request'')

      '
    name: SonarQube Scan
    needs:
    - build-jdk11
    - linux-jvm-tests
    - linux-integration-tests
    - linux-postman-tests
    - linux-frontend-tests
    - linux-cli-tests
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - continue-on-error: true
      if: github.ref != 'refs/heads/master'
      name: Setup master branch locally without switching current branch
      run: git fetch origin master:master
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      name: Download Maven Repo
      uses: actions/download-artifact@v4
      with:
        name: maven-repo
        path: ~/.m2/repository
    - continue-on-error: true
      name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-sonar
        path: ~/.sonar/cache
        restore-keys: ${{ runner.os }}-sonar
    - continue-on-error: true
      id: download-artifact
      name: Download build reports
      uses: dawidd6/action-download-artifact@v3.0.0
      with:
        if_no_artifact_found: warn
        name: build-reports-test-.*
        name_is_regexp: true
        path: dotcms-core/target/build-reports
    - continue-on-error: true
      env:
        MAVEN_OPTS: -Xmx2048m
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      name: Maven Build No Test
      run: './mvnw $JVM_TEST_MAVEN_OPTS compile -DskipTests=true -Pcoverage -Dcoverage.report.phase=compile

        ./mvnw $JVM_TEST_MAVEN_OPTS -Dsonar.log.level=DEBUG org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        ''-Dcoverage.execution.locations=build-reports/**/*.exec'' -Dsonar.projectKey=dotCMS_core_AYSbIemxK43eThAXTlt-
        -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.token=$SONAR_TOKEN

        '
      shell: bash
    - continue-on-error: true
      env:
        MAVEN_OPTS: -Xmx2048m
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      id: sonarqube-quality-gate-check
      name: SonarQube Quality Gate check
      timeout-minutes: 10
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        scanMetadataReportFile: target/sonar/report-task.txt
    - continue-on-error: true
      name: Example show SonarQube Quality Gate Status value
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status
        }}"
name: Maven CICD Pipeline
on:
  repository_dispatch:
    types: trigger-ga___maven-cicd-pipeline.yml
