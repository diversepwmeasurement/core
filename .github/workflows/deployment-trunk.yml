concurrency: trunk-deployment
jobs:
  deploy_check:
    outputs:
      build_sha: ${{ steps.check.outputs.build_sha }}
      is_latest: ${{ steps.check.outputs.is_latest }}
      run_id: ${{ steps.check.outputs.run_id }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout core
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: master
    - continue-on-error: true
      id: deployment-status
      name: Download latest artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        branch: master
        github_token: ${{ secrets.GITHUB_TOKEN }}
        if_no_artifact_found: warn
        name: trunk_latest_sha
        path: .
        search_artifacts: true
        workflow: deployment-trunk.yml
        workflow_conclusion: success
    - continue-on-error: true
      id: lookup-type
      name: Set options for artifact lookup
      run: "branch=''\nrunid='${{ github.event.inputs.build_run_id || github.event.workflow_run.id\
        \ }}'\n\nif [[ \"$runid\" == \"\" ]]; then\n  branch='master'\n  runid=''\n\
        fi\n\necho \"branch=$branch\" >> $GITHUB_OUTPUT\necho \"runid=$runid\" >>\
        \ $GITHUB_OUTPUT\n"
    - continue-on-error: true
      id: data-download
      name: Download Build Status
      uses: dawidd6/action-download-artifact@v2
      with:
        branch: ${{ steps.lookup-type.outputs.branch }}
        event: push
        if_no_artifact_found: warn
        name: workflow-data
        run_id: ${{ steps.lookup-type.outputs.runid }}
        search_artifacts: true
        workflow: maven-cicd-pipeline.yml
        workflow_conclusion: success
    - continue-on-error: true
      id: check
      name: Get SHAs and check if we should deploy
      run: "build_artifact_exists=${{ steps.data-download.outputs.found_artifact }}\n\
        last_deployed_exists=${{ steps.deployment-status.outputs.found_artifact }}\
        \ \nif [[ ${last_deployed_exists} == \"true\" ]]; then\n    last_deployed_sha=`echo\
        \ '${{ steps.deployment-status.outputs.artifacts }}' | jq -r '.[0].workflow_run.head_sha'`\n\
        else\n    echo \"No Last Deployed SHA found\"\nfi\n\nif [[ ${build_artifact_exists}\
        \ == \"true\" ]]; then\n    build_sha=`echo '${{ steps.data-download.outputs.artifacts\
        \ }}' | jq -r '.[0].workflow_run.head_sha'`\n    run_id=`echo '${{ steps.data-download.outputs.artifacts\
        \ }}' | jq -r '.[0].workflow_run.id'`\n    echo \"Build SHA: $build_sha\"\n\
        \    echo \"Run id: $run_id\"\nelse\n   echo \"No build artifact found, nothing\
        \ to deploy\"\n   echo \"should_deploy=false\" >> $GITHUB_OUTPUT\n   exit\
        \ 0\nfi\n\nif [[ ${last_deployed_exists} == \"true\" ]]; then\n    echo \"\
        Found last deployed artifact with SHA: $last_deployed_sha\"\n   if [[ \"${last_deployed_sha}\"\
        \ == \"${build_sha}\" ]]; then\n        echo \"Last deployed SHA and build\
        \ SHA are the same.\"\n        last_deployed_is_ancestor=false\n    else\n\
        \        if git merge-base --is-ancestor ${last_deployed_sha} ${build_sha};\
        \ then\n            echo \"The last deployed SHA is an ancestor of the build\
        \ SHA.\"\n            last_deployed_is_ancestor=true\n        else\n     \
        \       echo \"The last deployed SHA is not an ancestor of the build SHA.\"\
        \n            last_deployed_is_ancestor=false\n        fi\n    fi\nelse\n\
        \    last_deployed_is_ancestor=false\nfi\n\n\nSKIP_CHECKS=\"${{ github.event.inputs.skip_checks\
        \ == 'true' }}\"\nFORCE_LATESST=\"${{ github.event.inputs.force_latest ==\
        \ 'true' }}\"\n\nif [[ ${SKIP_CHECKS} == \"true\" || \"${last_deployed_is_ancestor}\"\
        \ == \"true\" || \"${last_deployed_exists}\" != \"true\" ]]; then\n      echo\
        \ \"should_deploy=true\" >> $GITHUB_OUTPUT\n  else\n      echo \"should_deploy=false\"\
        \ >> $GITHUB_OUTPUT\nfi\n\nif [[ ${FORCE_LATESST} == \"true\" || ${last_deployed_is_ancestor}\
        \ == true ]]; then\n      echo \"setting latest on deployment\"\n      echo\
        \ \"is_latest=true\" >> $GITHUB_OUTPUT\n  else\n      echo \"is_latest=false\"\
        \ >> $GITHUB_OUTPUT\nfi\necho \"build_sha=${build_sha}\" >> $GITHUB_OUTPUT\n\
        echo \"run_id=${run_id}\" >> $GITHUB_OUTPUT\n"
      shell: bash
  deployment:
    environment: trunk
    if: needs.deploy_check.outputs.should_deploy == 'true'
    needs:
    - deploy_check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout core
      uses: actions/checkout@v4
    - continue-on-error: true
      id: docker_build
      name: Build/Push Docker Image
      uses: ./.github/actions/deploy-artifact-docker
      with:
        build_run_id: ${{ needs.deploy_check.outputs.run_id }}
        commit_id: ${{ needs.deploy_check.outputs.build_sha }}
        do_deploy: ${{ vars.DOCKER_DEPLOY || 'true' }}
        docker_io_token: ${{ secrets.DOCKER_TOKEN }}
        docker_io_username: ${{ secrets.DOCKER_USERNAME }}
        docker_platforms: linux/amd64,linux/arm64
        github_token: ${{ secrets.GITHUB_TOKEN }}
        latest: ${{ needs.deploy_check.outputs.is_latest == 'true' }}
        ref: master
        snapshot: true
    - continue-on-error: true
      id: cli_deploy
      name: CLI Deploy
      uses: ./.github/actions/deploy-artifact-cli
      with:
        artifactory-repo-password: ${{ secrets.EE_REPO_PASSWORD }}
        artifactory-repo-username: ${{ secrets.EE_REPO_USERNAME }}
        branch: master
        build-run-id: ${{ needs.deploy_check.outputs.run_id }}
        commit-id: ${{ needs.deploy_check.outputs.build_sha }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - continue-on-error: true
      if: needs.deploy_check.outputs.is_latest == 'true'
      name: Create artifact with commit id
      run: 'echo "${{ needs.deploy_check.outputs.build_sha }}" > trunk_latest_sha.txt

        '
      shell: bash
    - continue-on-error: true
      if: needs.deploy_check.outputs.is_latest == 'true'
      name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: trunk_latest_sha
        path: trunk_latest_sha.txt
    - continue-on-error: true
      env:
        MSG_MINIMAL: true
        SLACK_FOOTER: ''
        SLACK_ICON: https://avatars.githubusercontent.com/u/1005263?s=200&v=4
        SLACK_MESSAGE: 'This automated script is happy to announce that a new docker
          image has been built for *master* with tags: [${{ steps.docker_build.outputs.tags
          }}] :docker:'
        SLACK_MSG_AUTHOR: ' '
        SLACK_TITLE: 'Attention dotters: Docker image built!'
        SLACK_USERNAME: dotBot
        SLACK_WEBHOOK: ${{ secrets.DEVELOPERS_SLACK_WEBHOOK }}
      if: github.repository == 'dotcms/core'
      name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
name: Trunk Deployment
on:
  repository_dispatch:
    types: trigger-ga___deployment-trunk.yml
permissions:
  actions: read
  contents: read
run-name: Trunk Deployment - ${{ github.event.workflow_run.name }}
