concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
defaults:
  run:
    shell: bash
env:
  GRAALVM_VERSION: 22.1.0
  JAVA_DISTRO: temurin
  JAVA_VERSION: 11
  MVN_PACKAGE_NAME: dotcms-cli
  MVN_PACKAGE_TYPE: uber-jar
  NODE_VERSION: 19
  NPM_PACKAGE_NAME: dotcli
  NPM_PACKAGE_SCOPE: '@dotcms'
jobs:
  build:
    name: Build native image on ${{ matrix.os }}
    needs:
    - precheck
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.precheck.outputs.AUXILIARY_BRANCH }}
    - continue-on-error: true
      if: ${{ matrix.os == 'ubuntu-latest' }}
      name: Cleanup Runner
      uses: ./.github/actions/cleanup-runner
    - continue-on-error: true
      if: ${{ contains(matrix.os, 'macos-') }}
      name: Cleanup macOS Runner
      uses: ./.github/actions/cleanup-macos-runner
    - continue-on-error: true
      if: ${{ matrix.os != 'windows-latest' }}
      name: Set up GraalVM for (Linux/MacOS)
      run: "if [ \"${{ matrix.os }}\" == \"ubuntu-latest\" ]; then\n  echo \"GraalVM\
        \ on Linux (AMD64)\"\n\n  ARCH=amd64\n  PLATFORM=linux\n  INSTALLATION_PATH=/usr/lib/jvm\n\
        \nelse\n  if [ \"${{ matrix.os }}\" == \"macos-13-xlarge\" ]; then\n    echo\
        \ \"GraalVM on Mac (AARCH64)\"\n    ARCH=aarch64\n  else\n    echo \"GraalVM\
        \ on Mac (AMD64)\"\n    ARCH=amd64\n  fi\n\n  PLATFORM=darwin\n  INSTALLATION_PATH=/Library/Java/JavaVirtualMachines\n\
        fi\n\necho \"PLATFORM=$PLATFORM\"\necho \"ARCH=$ARCH\"\necho \"INSTALLATION_PATH=$INSTALLATION_PATH\"\
        \n\nwget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{\
        \ env.GRAALVM_VERSION }}/graalvm-ce-java11-${PLATFORM}-${ARCH}-${{ env.GRAALVM_VERSION\
        \ }}.tar.gz\nsudo mkdir -p $INSTALLATION_PATH\ntar -xzf graalvm-ce-java11-${PLATFORM}-${ARCH}-${{\
        \ env.GRAALVM_VERSION }}.tar.gz\nsudo mv graalvm-ce-java11-${{ env.GRAALVM_VERSION\
        \ }} $INSTALLATION_PATH\n\nif [ \"${{ matrix.os }}\" != \"ubuntu-latest\"\
        \ ]; then\n  sudo xattr -r -d com.apple.quarantine /Library/Java/JavaVirtualMachines/graalvm-ce-java11-${{\
        \ env.GRAALVM_VERSION }}/Contents/Home\n  GRAALVM_HOME=\"${INSTALLATION_PATH}/graalvm-ce-java11-${{\
        \ env.GRAALVM_VERSION }}/Contents/Home\"\nelse\n  GRAALVM_HOME=\"${INSTALLATION_PATH}/graalvm-ce-java11-${{\
        \ env.GRAALVM_VERSION }}\"\nfi\n\necho \"GRAALVM_HOME=$GRAALVM_HOME\" >> $GITHUB_ENV\n\
        echo \"JAVA_HOME=$GRAALVM_HOME\" >> $GITHUB_ENV\nPATH=\"$GRAALVM_HOME/bin:$PATH\"\
        \necho \"PATH=$PATH\" >> $GITHUB_ENV\ngu install native-image\n"
    - continue-on-error: true
      if: ${{ matrix.os == 'windows-latest' }}
      name: Set up GraalVM for (Windows)
      run: "$ARCH=\"amd64\"\n$DOWNLOAD_URL=\"https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{\
        \ env.GRAALVM_VERSION }}/graalvm-ce-java11-windows-${ARCH}-${{ env.GRAALVM_VERSION\
        \ }}.zip\"\n$OUTPUT_PATH=\"C:\\graalvm-ce-java11-windows-${ARCH}-${{ env.GRAALVM_VERSION\
        \ }}.zip\"\n$GRAALVM_INSTALLATION_PATH=\"C:\\Program Files (x86)\\Java\"\n\
        \nInvoke-WebRequest -Uri $DOWNLOAD_URL -OutFile $OUTPUT_PATH\n\nif (Test-Path\
        \ -Path $GRAALVM_INSTALLATION_PATH -PathType Container) {\n  Write-Host \"\
        GRAALVM installation path exists.\"\n} else {\n  Write-Host \"Creating GRAALVM\
        \ installation path.\"\n  New-Item -ItemType Directory -Path $GRAALVM_INSTALLATION_PATH\n\
        }\n\nExpand-Archive -Path $OUTPUT_PATH -DestinationPath $GRAALVM_INSTALLATION_PATH\n\
        \n$env:JAVA_HOME=\"${GRAALVM_INSTALLATION_PATH}\\graalvm-ce-java11-22.1.0\"\
        \n$env:Path=\"${env:Path};${env:JAVA_HOME}\\bin;C:\\Program Files\\Microsoft\
        \ Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build;C:\\Program Files\\\
        Microsoft Visual Studio\\2022\\Enterprise\\VC\\Tools\\MSVC\\14.38.33130\\\
        bin\\HostX86\\x64\"\n\necho \"JAVA_HOME=${env:JAVA_HOME}\" >> \"$env:GITHUB_ENV\"\
        \necho \"Path=${env:Path}\" >> \"$env:GITHUB_ENV\"\n\ngu.cmd install native-image\n"
      shell: pwsh
    - continue-on-error: true
      name: Cache Maven packages
      uses: actions/cache@v4
      with:
        key: maven-${{ needs.precheck.outputs.DATE }}-${{ github.run_id }}
        path: ~/.m2/repository
    - continue-on-error: true
      env:
        DOTCMS_LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
      name: Prepare dotCMS license
      run: 'DOTCMS_LICENSE_PATH=~/.dotcms/license

        mkdir -p ${DOTCMS_LICENSE_PATH}

        echo "${DOTCMS_LICENSE_KEY}" > ${DOTCMS_LICENSE_PATH}/license.dat

        echo "DOTCMS_LICENSE_FILE=${DOTCMS_LICENSE_PATH}/license.dat" >> "$GITHUB_ENV"

        '
    - continue-on-error: true
      name: Compile source code
      run: './mvnw clean install -Dtest.failure.ignore=true -DskipTests=${{ github.event.inputs.skipTests
        }} -am -pl :dotcms-cli

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      name: Build uber-jar
      run: './mvnw package -Dquarkus.package.type=${{ env.MVN_PACKAGE_TYPE }} -DskipTests=${{
        github.event.inputs.skipTests }} -pl :dotcms-cli

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      if: ${{ matrix.os != 'windows-latest' }}
      name: Build Native Image (Linux/MacOS)
      run: './mvnw package -Pnative -DskipTests=${{ github.event.inputs.skipTests
        }} -pl :dotcms-cli

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      if: ${{ matrix.os == 'windows-latest' }}
      name: Build Native Image (Windows)
      run: 'cmd /c ''call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        && .\mvnw.cmd package -Dnative -DskipTests=true -pl :dotcms-cli''

        '
      shell: pwsh
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      name: Create distribution
      run: './mvnw -B -ntp -Pdist package -DskipTests=${{ github.event.inputs.skipTests
        }} -pl :dotcms-cli

        '
      working-directory: ${{ github.workspace }}
    - continue-on-error: true
      name: Distribution tree
      run: 'ls -ltr cli/target/distributions

        '
      working-directory: ${{ github.workspace }}/tools/dotcms-cli/
    - continue-on-error: true
      name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ matrix.os }}
        path: '${{ github.workspace }}/tools/dotcms-cli/cli/target/*-runner.jar

          ${{ github.workspace }}/tools/dotcms-cli/cli/target/distributions/*.zip

          ${{ github.workspace }}/tools/dotcms-cli/cli/target/distributions/*.tar.gz

          '
    strategy:
      fail-fast: true
      matrix:
        os:
        - macos-13-xlarge
        - macOS-latest
        - ubuntu-latest
  clean-up:
    if: always()
    name: Clean Up
    needs:
    - precheck
    - build
    - release
    - publish-npm-package
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.precheck.outputs.HEAD }}
    - continue-on-error: true
      name: Delete release auxiliary branch - ${{ needs.precheck.outputs.AUXILIARY_BRANCH
        }}
      run: git push origin --delete ${{ needs.precheck.outputs.AUXILIARY_BRANCH }}
  precheck:
    name: Pre-check
    outputs:
      AUXILIARY_BRANCH: ${{ steps.version.outputs.AUXILIARY_BRANCH }}
      DATE: ${{ steps.get-date.outputs.DATE }}
      HEAD: ${{ steps.version.outputs.HEAD }}
      RELEASE_VERSION: ${{ steps.version.outputs.RELEASE_VERSION }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      name: Log GitHub context
      run: echo "$GITHUB_CONTEXT"
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.CI_MACHINE_TOKEN }}
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JAVA_DISTRO }}
        java-version: ${{ env.JAVA_VERSION }}
    - continue-on-error: true
      uses: ./.github/actions/cleanup-runner
    - continue-on-error: true
      id: get-date
      name: Get Date
      run: 'echo "DATE=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      id: cache-maven
      name: Restore Maven Repository
      uses: actions/cache@v4
      with:
        key: maven-${{ steps.get-date.outputs.DATE }}-${{ github.run_id }}
        path: ~/.m2/repository
    - continue-on-error: true
      name: Setup git config
      run: 'git config user.name "${{ secrets.CI_MACHINE_USER }}"

        git config user.email "dotCMS-Machine-User@dotcms.com"

        '
    - continue-on-error: true
      id: version
      name: Set release version
      run: 'RELEASE_VERSION=${{ github.event.inputs.version }}

        HEAD=${{ github.ref_name }}


        # Create a release branch for versioning updates

        AUXILIARY_BRANCH=version-update-${RELEASE_VERSION}-${{ github.run_id }}

        git checkout -b $AUXILIARY_BRANCH


        # Update version in pom.xml

        ./mvnw -B -ntp versions:set versions:commit -DnewVersion=$RELEASE_VERSION


        # Commit version changes

        git commit --allow-empty -a -m "Update dotCLI version to $RELEASE_VERSION"

        git push origin $AUXILIARY_BRANCH


        echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"

        echo "HEAD=$HEAD" >> "$GITHUB_OUTPUT"

        echo "AUXILIARY_BRANCH=$AUXILIARY_BRANCH" >> "$GITHUB_OUTPUT"

        '
      working-directory: ${{ github.workspace }}/tools/dotcms-cli
  publish-npm-package:
    if: success()
    name: Publish NPM Package
    needs:
    - precheck
    - build
    - release
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.precheck.outputs.HEAD }}
    - continue-on-error: true
      uses: ./.github/actions/cleanup-runner
    - continue-on-error: true
      name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - continue-on-error: true
      name: Install Jinja2
      run: pip install jinja2-cli
    - continue-on-error: true
      name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: ${{ github.workspace }}/artifacts
        pattern: artifacts-*
    - continue-on-error: true
      name: Dynamic configuration of NPM package Version and Tag
      run: "MVN_PACKAGE_VERSION=$(echo ${{ github.event.inputs.version }} | tr '[:lower:]'\
        \ '[:upper:]')\nPACKAGE_FULL_NAME=${{ env.NPM_PACKAGE_SCOPE }}/${{ env.NPM_PACKAGE_NAME\
        \ }}\n\n# Check if the npm package exists\nif ! npm view $PACKAGE_FULL_NAME\
        \ &> /dev/null; then\n  echo \"::error::The package $PACKAGE_FULL_NAME does\
        \ not exist on npm.\"\n  exit 1\nfi\n\n# Check if the package is a snapshot\n\
        REGEX=\"([0-9]+\\.[0-9]+\\.[0-9]+)-SNAPSHOT\"\n\nif [[ $MVN_PACKAGE_VERSION\
        \ =~ $REGEX ]]; then\n  echo \"::debug::Snapshot version found.\"\n\n  NPM_PACKAGE_VERSION_TAG=\"\
        rc\"\n  MVN_BASE_VERSION=\"${BASH_REMATCH[1]}\"\n\n  # Use regular expression\
        \ to extract version components\n  if [[ $MVN_BASE_VERSION =~ ([0-9]+)\\.([0-9]+)\\\
        .([0-9]+) ]]; then\n    MAJOR=$(echo \"${BASH_REMATCH[1]}\" | sed \"s/\\b0\\\
        +\\([1-9]\\)/\\1/g\")\n    MINOR=$(echo \"${BASH_REMATCH[2]}\" | sed \"s/\\\
        b0\\+\\([1-9]\\)/\\1/g\")\n    PATCH=$(echo \"${BASH_REMATCH[3]}\" | sed \"\
        s/\\b0\\+\\([1-9]\\)/\\1/g\")\n    VERSION_NPM_FORMAT=\"${MAJOR}.${MINOR}.${PATCH}\"\
        \n\n    echo \"::debug::VERSION_NPM_FORMAT: ${VERSION_NPM_FORMAT}\"\n  else\n\
        \    echo \"::error::Invalid Maven version format: $MVN_BASE_VERSION\"\n \
        \   exit 1\n  fi\n\n  LAST_RC_VERSION=$(npm view $PACKAGE_FULL_NAME versions\
        \ --json | jq -r 'map(select(test(\"-rc\\\\d+$\"))) | max')\n\n  if [[ $LAST_RC_VERSION\
        \ == \"$VERSION_NPM_FORMAT\"* ]]; then\n    NEXT_RC_VERSION=$(echo \"$LAST_RC_VERSION\"\
        \ | awk -F '-rc' '{print $1 \"-rc\" $2 + 1}')\n    RC_SUFFIX=$(echo \"$NEXT_RC_VERSION\"\
        \ | sed -n 's/.*-rc\\([0-9]*\\)/-rc\\1/p')\n  else\n    RC_SUFFIX=\"-rc1\"\
        \n  fi;\n\n  NPM_PACKAGE_VERSION=${MVN_BASE_VERSION}${RC_SUFFIX}\nelse\n \
        \ echo \"::debug::Release version found.\"\n  NPM_PACKAGE_VERSION_TAG=\"latest\"\
        \n  NPM_PACKAGE_VERSION=${MVN_PACKAGE_VERSION}\nfi;\necho \"::debug::NPM_PACKAGE_VERSION:\
        \ $NPM_PACKAGE_VERSION\"\necho \"::debug::NPM_PACKAGE_VERSION_TAG: $NPM_PACKAGE_VERSION_TAG\"\
        \n\necho \"NPM_PACKAGE_VERSION=$NPM_PACKAGE_VERSION\" >> $GITHUB_ENV\necho\
        \ \"NPM_PACKAGE_VERSION_TAG=$NPM_PACKAGE_VERSION_TAG\" >> $GITHUB_ENV\n"
    - continue-on-error: true
      env:
        MVN_PACKAGE_VERSION: ${{ github.event.inputs.version }}
      name: NPM Package setup
      run: 'echo "Adding bin folder with all the binaries"

        mkdir -p bin

        find ${{ github.workspace }}/artifacts/distributions/ -name "*.zip" -exec
        unzip -d bin {} \;


        echo "Adding wrapper script"

        mv src/postinstall.js.seed src/postinstall.js


        echo "Adding README.md file"

        cp ${{ github.workspace }}/tools/dotcms-cli/README.md .


        echo "Adding package.json file"

        jinja2 package.j2 -D packageName=${MVN_PACKAGE_NAME} -D npmPackageName=${NPM_PACKAGE_NAME}
        -D npmPackageVersion=${NPM_PACKAGE_VERSION} -D packageVersion=${MVN_PACKAGE_VERSION}
        --format json -o package.json

        rm -f package.j2


        cat package.json

        cat src/postinstall.js

        '
      working-directory: ${{ github.workspace }}/tools/dotcms-cli/npm/
    - continue-on-error: true
      name: NPM Package tree
      run: ls -R ${{ github.workspace }}/tools/dotcms-cli/npm/
    - continue-on-error: true
      env:
        NPM_AUTH_TOKEN: ${{ secrets.NPM_ORG_TOKEN }}
      name: Publish to NPM registry
      run: 'echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc

        npm publish --access public --tag ${NPM_PACKAGE_VERSION_TAG}

        '
      working-directory: ${{ github.workspace }}/tools/dotcms-cli/npm/
  release:
    needs:
    - precheck
    - build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Check out repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.precheck.outputs.AUXILIARY_BRANCH }}
        token: ${{ secrets.CI_MACHINE_TOKEN }}
    - continue-on-error: true
      uses: ./.github/actions/cleanup-runner
    - continue-on-error: true
      name: Create artifacts directory
      run: 'mkdir -p ${{ github.workspace }}/artifacts

        echo "artifactsDir=${{ github.workspace }}/artifacts" >> "$GITHUB_ENV"

        '
    - continue-on-error: true
      name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: ${{ github.workspace }}/artifacts
        pattern: artifacts-*
    - continue-on-error: true
      name: List artifacts
      run: 'ls -R

        '
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JAVA_DISTRO }}
        java-version: ${{ env.JAVA_VERSION }}
    - continue-on-error: true
      name: Cache Maven packages
      uses: actions/cache@v4
      with:
        key: maven-${{ needs.precheck.outputs.DATE }}-${{ github.run_id }}
        path: ~/.m2/repository
    - continue-on-error: true
      env:
        JRELEASER_ARTIFACTORY_PASSWORD: ${{ secrets.EE_REPO_PASSWORD }}
        JRELEASER_ARTIFACTORY_USERNAME: ${{ secrets.EE_REPO_USERNAME }}
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.RELEASE_VERSION }}
        JRELEASER_SLACK_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        JRELEASER_SLACK_WEBHOOK: ${{ secrets.RELEASE_SLACK_WEBHOOK }}
      name: JReleaser
      run: 'tools/dotcms-cli/mvnw -B -Prelease jreleaser:full-release -DartifactsDir=artifacts
        -Djreleaser.git.root.search=true -pl :dotcms-cli-parent -Dmaven.plugin.validation=VERBOSE

        '
      working-directory: ${{ github.workspace }}
name: dotCLI Release
on:
  repository_dispatch:
    types: trigger-ga___cli-release-process.yml
